function clone(e){if(!e)return e;var o;if([Number,String,Boolean].forEach((function(n){e instanceof n&&(o=n(e))})),void 0===o)if("[object Array]"===Object.prototype.toString.call(e))o=[],e.forEach((function(e,n,t){o[n]=clone(e)}));else if("object"==typeof e)if(e.nodeType&&"function"==typeof e.cloneNode)o=e.cloneNode(!0);else if(e.prototype)o=e;else if(e instanceof Date)o=new Date(e);else for(var n in o={},e)o[n]=clone(e[n]);else o=e;return o}var copy=clone({one:{"one-one":new String("hello"),"one-two":["one","two",!0,"four"]},two:document.createElement("div"),three:[{name:"three-one",number:new Number("100"),obj:new function(){this.name="Object test"}}]});class myClass{constructor(e){if(void 0===e)throw new Error("Cannot be called directly")}static async build(){var e=await doSomeAsyncStuff();return new myClass(e)}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdDEuanMiLCJzY3JpcHQyLmpzIl0sIm5hbWVzIjpbImNsb25lIiwiaXRlbSIsInJlc3VsdCIsIk51bWJlciIsIlN0cmluZyIsIkJvb2xlYW4iLCJmb3JFYWNoIiwidHlwZSIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsImNoaWxkIiwiaW5kZXgiLCJhcnJheSIsIm5vZGVUeXBlIiwiY2xvbmVOb2RlIiwiRGF0ZSIsImkiLCJjb3B5Iiwib25lIiwib25lLW9uZSIsIm9uZS10d28iLCJ0d28iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ0aHJlZSIsIm5hbWUiLCJudW1iZXIiLCJvYmoiLCJ0aGlzIiwibXlDbGFzcyIsIltvYmplY3QgT2JqZWN0XSIsImFzeW5jX3BhcmFtIiwiRXJyb3IiLCJhc3luY19yZXN1bHQiLCJkb1NvbWVBc3luY1N0dWZmIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFBQSxNQUFBQyxHQUNBLElBQUFBLEVBQUEsT0FBQUEsRUFFQSxJQUNBQyxFQVNBLEdBVkEsQ0FBQUMsT0FBQUMsT0FBQUMsU0FJQUMsU0FBQSxTQUFBQyxHQUNBTixhQUFBTSxJQUNBTCxFQUFBSyxFQUFBTixZQUlBLElBQUFDLEVBQ0EsR0FBQSxtQkFBQU0sT0FBQUMsVUFBQUMsU0FBQUMsS0FBQVYsR0FDQUMsRUFBQSxHQUNBRCxFQUFBSyxTQUFBLFNBQUFNLEVBQUFDLEVBQUFDLEdBQ0FaLEVBQUFXLEdBQUFiLE1BQUFZLFdBRUEsR0FBQSxpQkFBQVgsRUFFQSxHQUFBQSxFQUFBYyxVQUFBLG1CQUFBZCxFQUFBZSxVQUNBZCxFQUFBRCxFQUFBZSxXQUFBLFFBQ0EsR0FBQWYsRUFBQVEsVUFpQkFQLEVBQUFELE9BaEJBLEdBQUFBLGFBQUFnQixLQUNBZixFQUFBLElBQUFlLEtBQUFoQixRQUlBLElBQUEsSUFBQWlCLEtBREFoQixFQUFBLEdBQ0FELEVBQ0FDLEVBQUFnQixHQUFBbEIsTUFBQUMsRUFBQWlCLFNBY0FoQixFQUFBRCxFQUlBLE9BQUFDLEVBR0EsSUFBQWlCLEtBQUFuQixNQUFBLENBQ0FvQixJQUFBLENBQ0FDLFVBQUEsSUFBQWpCLE9BQUEsU0FDQWtCLFVBQUEsQ0FDQSxNQUFBLE9BQUEsRUFBQSxTQUdBQyxJQUFBQyxTQUFBQyxjQUFBLE9BQ0FDLE1BQUEsQ0FDQSxDQUNBQyxLQUFBLFlBQ0FDLE9BQUEsSUFBQXpCLE9BQUEsT0FDQTBCLElBQUEsSUFBQSxXQUNBQyxLQUFBSCxLQUFBLG1CQ2hFQSxNQUFBSSxRQUNBQyxZQUFBQyxHQUNBLFFBQUEsSUFBQUEsRUFDQSxNQUFBLElBQUFDLE1BQUEsNkJBSUFGLHFCQUNBLElBQUFHLFFBQUFDLG1CQUNBLE9BQUEsSUFBQUwsUUFBQUkiLCJmaWxlIjoiYXBwYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gY2xvbmUgKGl0ZW0pIHtcclxuICAgIGlmICghaXRlbSkgeyByZXR1cm4gaXRlbSB9IC8vIG51bGwsIHVuZGVmaW5lZCB2YWx1ZXMgY2hlY2tcclxuXHJcbiAgICB2YXIgdHlwZXMgPSBbTnVtYmVyLCBTdHJpbmcsIEJvb2xlYW5dLFxyXG4gICAgICAgIHJlc3VsdDtcclxuXHJcbiAgICAvLyBub3JtYWxpemluZyBwcmltaXRpdmVzIGlmIHNvbWVvbmUgZGlkIG5ldyBTdHJpbmcoJ2FhYScpLCBvciBuZXcgTnVtYmVyKCc0NDQnKTtcclxuICAgIHR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcclxuICAgICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIHR5cGUpIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gdHlwZShpdGVtKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAodHlwZW9mIHJlc3VsdCA9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVtKSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICBpdGVtLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkLCBpbmRleCwgYXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBjbG9uZShjaGlsZCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0gPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAvLyB0ZXN0aW5nIHRoYXQgdGhpcyBpcyBET01cclxuICAgICAgICAgICAgaWYgKGl0ZW0ubm9kZVR5cGUgJiYgdHlwZW9mIGl0ZW0uY2xvbmVOb2RlID09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gaXRlbS5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWl0ZW0ucHJvdG90eXBlKSB7IC8vIGNoZWNrIHRoYXQgdGhpcyBpcyBhIGxpdGVyYWxcclxuICAgICAgICAgICAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBEYXRlKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpdCBpcyBhbiBvYmplY3QgbGl0ZXJhbFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSBjbG9uZShpdGVtW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBkZXBlbmRpbmcgd2hhdCB5b3Ugd291bGQgbGlrZSBoZXJlLFxyXG4gICAgICAgICAgICAgICAgLy8ganVzdCBrZWVwIHRoZSByZWZlcmVuY2UsIG9yIGNyZWF0ZSBuZXcgb2JqZWN0XHJcbiAgICAgICAgICAgICAgICBpZiAoZmFsc2UgJiYgaXRlbS5jb25zdHJ1Y3Rvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdvdWxkIG5vdCBhZHZpY2UgdG8gZG8gdGhhdCwgcmVhc29uPyBSZWFkIGJlbG93XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gbmV3IGl0ZW0uY29uc3RydWN0b3IoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gaXRlbTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IGl0ZW07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbnZhciBjb3B5ID0gY2xvbmUoe1xyXG4gICAgb25lOiB7XHJcbiAgICAgICAgJ29uZS1vbmUnOiBuZXcgU3RyaW5nKFwiaGVsbG9cIiksXHJcbiAgICAgICAgJ29uZS10d28nOiBbXHJcbiAgICAgICAgICAgIFwib25lXCIsIFwidHdvXCIsIHRydWUsIFwiZm91clwiXHJcbiAgICAgICAgXVxyXG4gICAgfSxcclxuICAgIHR3bzogZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcclxuICAgIHRocmVlOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiBcInRocmVlLW9uZVwiLFxyXG4gICAgICAgICAgICBudW1iZXI6IG5ldyBOdW1iZXIoXCIxMDBcIiksXHJcbiAgICAgICAgICAgIG9iajogbmV3IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubmFtZSA9IFwiT2JqZWN0IHRlc3RcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIF1cclxufSkiLCJjbGFzcyBteUNsYXNzIHtcclxuICAgIGNvbnN0cnVjdG9yKGFzeW5jX3BhcmFtKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBhc3luY19wYXJhbSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgYmUgY2FsbGVkIGRpcmVjdGx5Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBhc3luYyBidWlsZCgpIHtcclxuICAgICAgICB2YXIgYXN5bmNfcmVzdWx0ID0gYXdhaXQgZG9Tb21lQXN5bmNTdHVmZigpO1xyXG4gICAgICAgIHJldHVybiBuZXcgbXlDbGFzcyhhc3luY19yZXN1bHQpO1xyXG4gICAgfVxyXG59Il19
